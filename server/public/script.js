// API Base URL
const API_URL = '';  // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç.–∫. API –Ω–∞ —Ç–æ–º –∂–µ –¥–æ–º–µ–Ω–µ

let currentClientId = null;

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener('DOMContentLoaded', () => {
    loadStats();
    loadClients();
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        loadStats();
        loadClients();
    }, 30000);
});

// ==========================================
// STATS
// ==========================================

async function loadStats() {
    try {
        const response = await fetch(`${API_URL}/api/admin/stats`);
        const data = await response.json();
        
        document.getElementById('totalClients').textContent = data.total_clients;
        document.getElementById('activeClients').textContent = data.active_clients;
        document.getElementById('totalRules').textContent = data.total_rules;
    } catch (error) {
        console.error('Error loading stats:', error);
    }
}

// ==========================================
// CLIENTS
// ==========================================

async function loadClients() {
    try {
        const response = await fetch(`${API_URL}/api/admin/clients`);
        const data = await response.json();
        
        const clientsList = document.getElementById('clientsList');
        
        if (data.clients.length === 0) {
            clientsList.innerHTML = '<div class="empty-state">–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</div>';
            return;
        }
        
        clientsList.innerHTML = data.clients.map(client => {
            const lastSeen = new Date(client.last_seen);
            const now = new Date();
            const diffMinutes = Math.floor((now - lastSeen) / 1000 / 60);
            const isActive = diffMinutes < 60;
            
            let lastSeenText = '';
            if (diffMinutes < 1) {
                lastSeenText = '–¢–æ–ª—å–∫–æ —á—Ç–æ';
            } else if (diffMinutes < 60) {
                lastSeenText = `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
            } else if (diffMinutes < 1440) {
                lastSeenText = `${Math.floor(diffMinutes / 60)} —á –Ω–∞–∑–∞–¥`;
            } else {
                lastSeenText = `${Math.floor(diffMinutes / 1440)} –¥ –Ω–∞–∑–∞–¥`;
            }
            
            return `
                <div class="client-card" onclick="openClientModal('${client.id}')">
                    <div class="client-header">
                        <div class="client-name">üì± ${client.device_name}</div>
                        <span class="client-status ${isActive ? 'status-active' : 'status-inactive'}">
                            ${isActive ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ–ª–∞–π–Ω'}
                        </span>
                    </div>
                    <div class="client-details">
                        <strong>ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</strong> ${client.device_id.substring(0, 20)}...<br>
                        <strong>–ü—Ä–∞–≤–∏–ª:</strong> ${client.rules_count}<br>
                        <strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> ${lastSeenText}<br>
                        <strong>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</strong> ${new Date(client.registered_at).toLocaleString('ru-RU')}
                    </div>
                </div>
            `;
        }).join('');
    } catch (error) {
        console.error('Error loading clients:', error);
        document.getElementById('clientsList').innerHTML = 
            '<div class="empty-state" style="color: red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤</div>';
    }
}

// ==========================================
// CLIENT MODAL
// ==========================================

async function openClientModal(clientId) {
    currentClientId = clientId;
    
    try {
        const response = await fetch(`${API_URL}/api/admin/clients/${clientId}`);
        const data = await response.json();
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        document.getElementById('clientInfo').innerHTML = `
            <p><strong>–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</strong> ${data.client.device_name}</p>
            <p><strong>ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</strong> ${data.client.device_id}</p>
            <p><strong>Client ID:</strong> ${data.client.id}</p>
            <p><strong>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</strong> ${new Date(data.client.registered_at).toLocaleString('ru-RU')}</p>
            <p><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> ${new Date(data.client.last_seen).toLocaleString('ru-RU')}</p>
        `;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
        loadRules(data.rules);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.getElementById('clientModal').style.display = 'block';
    } catch (error) {
        console.error('Error loading client:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞');
    }
}

function loadRules(rules) {
    const rulesList = document.getElementById('rulesList');
    
    if (rules.length === 0) {
        rulesList.innerHTML = '<div class="empty-state">–ù–µ—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞</div>';
        return;
    }
    
    rulesList.innerHTML = rules.map(rule => `
        <div class="rule-card">
            <div class="rule-header">
                <div class="rule-numbers">
                    <div class="rule-original">üìû ${rule.original_number}</div>
                    <div style="margin: 5px 0; color: #999;">‚Üì –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ ‚Üì</div>
                    <div class="rule-display">üì± ${rule.display_number}</div>
                </div>
                <div class="rule-actions">
                    <button class="btn btn-danger btn-small" onclick="deleteRule(${rule.id})">üóëÔ∏è</button>
                </div>
            </div>
            ${rule.description ? `<div class="rule-description">üìù ${rule.description}</div>` : ''}
        </div>
    `).join('');
}

function closeModal() {
    document.getElementById('clientModal').style.display = 'none';
    currentClientId = null;
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('originalNumber').value = '';
    document.getElementById('displayNumber').value = '';
    document.getElementById('description').value = '';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
window.onclick = function(event) {
    const modal = document.getElementById('clientModal');
    if (event.target === modal) {
        closeModal();
    }
}

// ==========================================
// RULES MANAGEMENT
// ==========================================

async function addRule() {
    if (!currentClientId) {
        alert('–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω');
        return;
    }
    
    const originalNumber = document.getElementById('originalNumber').value.trim();
    const displayNumber = document.getElementById('displayNumber').value.trim();
    const description = document.getElementById('description').value.trim();
    
    if (!originalNumber || !displayNumber) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –Ω–æ–º–µ—Ä–∞');
        return;
    }
    
    try {
        const response = await fetch(`${API_URL}/api/admin/rules`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                client_id: currentClientId,
                original_number: originalNumber,
                display_number: displayNumber,
                description: description
            })
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞');
        }
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('originalNumber').value = '';
        document.getElementById('displayNumber').value = '';
        document.getElementById('description').value = '';
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        openClientModal(currentClientId);
        
        alert('‚úÖ –ü—Ä–∞–≤–∏–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
    } catch (error) {
        console.error('Error adding rule:', error);
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞');
    }
}

async function deleteRule(ruleId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ?')) {
        return;
    }
    
    try {
        const response = await fetch(`${API_URL}/api/admin/rules/${ruleId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞');
        }
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        openClientModal(currentClientId);
        
        alert('‚úÖ –ü—Ä–∞–≤–∏–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!');
    } catch (error) {
        console.error('Error deleting rule:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞');
    }
}

async function deleteClient() {
    if (!currentClientId) {
        return;
    }
    
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞? –í—Å–µ –µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!')) {
        return;
    }
    
    try {
        const response = await fetch(`${API_URL}/api/admin/clients/${currentClientId}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞');
        }
        
        alert('‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
        closeModal();
        loadClients();
        loadStats();
    } catch (error) {
        console.error('Error deleting client:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞');
    }
}

